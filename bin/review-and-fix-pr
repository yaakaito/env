#!/bin/bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show help message
show_help() {
    cat << EOF
Usage: review-and-fix-pr [PR_NUMBER]

Combined PR review and fix workflow with Claude Code integration.

OPTIONS:
    PR_NUMBER            Optional PR number to review and fix (if not provided, will show list)
    -h, --help          Show this help message

DESCRIPTION:
    This tool provides a complete workflow for reviewing and fixing PRs:
    1. First, performs a comprehensive code review using Claude
    2. Then, fetches all PR comments and review feedback
    3. Finally, generates a fix prompt combining review and comments for Claude

    The workflow uses separate Claude instances for review and fixing to ensure
    proper separation of concerns.

EOF
}

# Check if required commands are available
check_requirements() {
    local missing_commands=()
    
    for cmd in git gh jq claude; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_commands+=("$cmd")
        fi
    done
    
    if [ ${#missing_commands[@]} -ne 0 ]; then
        log_error "Missing required commands: ${missing_commands[*]}"
        exit 1
    fi
}

# Find git repository root
find_git_root() {
    local current_dir="$(pwd)"
    
    while [ "$current_dir" != "/" ]; do
        if [ -d "$current_dir/.git" ]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    log_error "Not in a git repository"
    exit 1
}

# Select PR using gh command
select_pr() {
    log_info "Selecting PR..." >&2
    
    # Check if gh is authenticated
    if ! gh auth status &> /dev/null; then
        log_error "Please authenticate with GitHub CLI first: gh auth login" >&2
        exit 1
    fi
    
    # Get PRs list formatted for peco
    local prs_list
    prs_list=$(gh pr list --state=open --json number,title,author --template '{{range .}}{{printf "#%v: %s (by %s)\n" .number .title .author.login}}{{end}}')
    
    if [ -z "$prs_list" ]; then
        log_error "No open PRs found" >&2
        exit 1
    fi
    
    # Use peco to select PR interactively
    local selected_pr
    selected_pr=$(echo "$prs_list" | peco --prompt="Select PR to review and fix: ")
    
    if [ -z "$selected_pr" ]; then
        log_error "No PR selected" >&2
        exit 1
    fi
    
    # Extract PR number from selected line (format: #123: Title)
    local pr_number
    pr_number=$(echo "$selected_pr" | sed 's/^#\([0-9]*\):.*/\1/')
    
    if [ -z "$pr_number" ]; then
        log_error "Could not extract PR number" >&2
        exit 1
    fi
    
    echo "$pr_number"
}

# Get current branch info
get_current_branch() {
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    echo "$current_branch"
}

# Check if current branch is associated with the PR
check_pr_branch() {
    local pr_number="$1"
    local current_branch="$2"
    
    log_info "Checking if current branch is associated with PR #$pr_number..." >&2
    
    # Get PR head ref
    local pr_head_ref
    pr_head_ref=$(gh pr view "$pr_number" --json headRefName -q '.headRefName')
    
    if [ "$current_branch" = "$pr_head_ref" ]; then
        log_success "Current branch '$current_branch' matches PR head ref '$pr_head_ref'" >&2
        return 0
    else
        log_warning "Current branch '$current_branch' does not match PR head ref '$pr_head_ref'" >&2
        return 1
    fi
}

# Get PR details and diff for review
get_pr_details() {
    local pr_number="$1"
    
    log_info "Getting PR details for #$pr_number..." >&2
    
    # Get PR details
    local pr_details
    pr_details=$(gh pr view "$pr_number" --json title,body,author,headRepository,baseRepository,headRefName,baseRefName,url)
    
    # Get PR diff
    local pr_diff
    pr_diff=$(gh pr diff "$pr_number")
    
    # Combine the information
    local combined_info
    combined_info=$(jq -n \
        --argjson pr "$pr_details" \
        --arg diff "$pr_diff" \
        '{
            title: $pr.title,
            body: $pr.body,
            author: $pr.author.login,
            url: $pr.url,
            headRepository: $pr.headRepository.name,
            baseRepository: $pr.baseRepository.name,
            headRefName: $pr.headRefName,
            baseRefName: $pr.baseRefName,
            diff: $diff
        }')
    
    echo "$combined_info"
}

# Perform code review using Claude
perform_review() {
    local pr_number="$1"
    local repo_root="$2"
    
    log_info "Step 1: Performing code review with Claude..." >&2
    
    # Get PR details and diff
    local pr_data
    pr_data=$(get_pr_details "$pr_number")
    
    # Generate review prompt
    local review_prompt
    review_prompt=$(cat << EOF
You are an expert code reviewer. Follow these steps:

1. If no PR number is provided in the args, use Bash("gh pr list") to show open PRs
2. If a PR number is provided, use Bash("gh pr view <number>") to get PR details
3. Use Bash("gh pr diff <number>") to get the diff
4. Analyze the changes and provide a thorough code review that includes:
   - Overview of what the PR does
   - Analysis of code quality and style
   - Specific suggestions for improvements
   - Any potential issues or risks

Keep your review concise but thorough. Focus on:
- Code correctness
- Following project conventions
- Performance implications
- Test coverage
- Security considerations

Format your review with clear sections and bullet points.

PR number: $pr_number

PR Details:
$pr_data
EOF
)
    
    log_info "Running Claude review (separate instance)..." >&2
    
    # Run Claude review in a separate instance
    local review_result
    review_result=$(echo "$review_prompt" | claude -p 2>&1 || true)
    
    log_success "Code review completed" >&2
    
    echo "$review_result"
}

# Get repository info
get_repo_info() {
    local pr_number="$1"
    
    log_info "Getting repository info for PR #$pr_number..." >&2
    
    # Get PR info to extract repository details
    local pr_info
    pr_info=$(gh pr view "$pr_number" --json headRepository,baseRepository,number)
    
    local owner
    local repo
    owner=$(echo "$pr_info" | jq -r '.headRepository.owner.login')
    repo=$(echo "$pr_info" | jq -r '.headRepository.name')
    
    echo "$owner/$repo"
}

# Get PR comments
get_pr_comments() {
    local pr_number="$1"
    local repo_root="$2"
    
    log_info "Step 2: Fetching PR comments..." >&2
    
    # Get repository info
    local repo_info
    repo_info=$(get_repo_info "$pr_number")
    log_info "Repository: $repo_info" >&2
    
    # Get PR-level comments
    local pr_comments
    pr_comments=$(gh api "/repos/$repo_info/issues/$pr_number/comments" || echo "[]")
    
    # Get review comments
    local review_comments
    review_comments=$(gh api "/repos/$repo_info/pulls/$pr_number/comments" || echo "[]")
    
    # Combine and format comments
    local formatted_comments
    formatted_comments=$(jq -n \
        --argjson pr_comments "$pr_comments" \
        --argjson review_comments "$review_comments" \
        --arg repo_info "$repo_info" \
        --arg pr_number "$pr_number" \
        '{
            pr_number: $pr_number,
            repository: $repo_info,
            pr_comments: $pr_comments,
            review_comments: $review_comments
        }')
    
    # Format comments for display
    local comments_result
    comments_result=$(echo "$formatted_comments" | jq -r '
        "## Comments\n" +
        if (.pr_comments | length) > 0 then
            "### PR Comments:\n" +
            (.pr_comments | map(
                "- @" + .user.login + ":\n" +
                "  > " + (.body | gsub("\n"; "\n  > "))
            ) | join("\n\n")) + "\n\n"
        else
            "### PR Comments:\nNo PR comments found.\n\n"
        end +
        if (.review_comments | length) > 0 then
            "### Review Comments:\n" +
            (.review_comments | map(
                "- @" + .user.login + " " + .path + (if .line then "#" + (.line | tostring) else "" end) + ":\n" +
                (if .diff_hunk then "  ```diff\n" + .diff_hunk + "\n  ```\n" else "" end) +
                "  > " + (.body | gsub("\n"; "\n  > "))
            ) | join("\n\n")) + "\n"
        else
            "### Review Comments:\nNo review comments found.\n"
        end
    ')
    
    log_success "PR comments fetched" >&2
    
    echo "$comments_result"
}

# Main function
main() {
    local pr_number=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                pr_number="$1"
                shift
                ;;
        esac
    done
    
    log_info "Starting PR review and fix workflow with Claude..." >&2
    
    # Check requirements
    check_requirements
    
    # Find git repository root
    local repo_root
    repo_root=$(find_git_root)
    log_success "Found git repository at: $repo_root" >&2
    
    # Change to repo root
    cd "$repo_root"
    
    # Select PR if not provided
    if [ -z "$pr_number" ]; then
        pr_number=$(select_pr)
        log_success "Selected PR #$pr_number" >&2
    else
        log_info "Using provided PR #$pr_number" >&2
    fi
    
    # Get current branch
    local current_branch
    current_branch=$(get_current_branch)
    log_info "Current branch: $current_branch" >&2
    
    # Check if we're on the right branch
    if check_pr_branch "$pr_number" "$current_branch"; then
        log_success "Working on the correct branch for PR #$pr_number" >&2
    else
        log_warning "You may want to switch to the PR branch for making fixes" >&2
    fi
    
    # Step 1: Perform code review
    log_info "=== Starting Code Review Phase ===" >&2
    local review_result
    review_result=$(perform_review "$pr_number" "$repo_root")
    
    # Step 2: Get PR comments
    log_info "=== Starting Comments Fetching Phase ===" >&2
    local comments_result
    comments_result=$(get_pr_comments "$pr_number" "$repo_root")
    
    # Step 3: Combine and create fix prompt
    log_info "=== Generating Fix Prompt ===" >&2
    log_success "Review and comments collection completed!" >&2
    log_info "Working directory: $repo_root" >&2
    log_info "PR: #$pr_number" >&2
    log_info "Current branch: $current_branch" >&2
    echo "" >&2
    log_info "Outputting working directory and combined fix prompt..." >&2
    echo "" >&2
    
    # Output working directory first, then the combined prompt
    echo "$repo_root"
    
    # Generate comprehensive fix prompt
    cat << EOF
You are an expert code reviewer and developer. Based on the review feedback and PR comments below, please analyze and fix the code issues identified.

## Task Overview
You need to fix the issues identified in PR #$pr_number based on:
1. Code review feedback
2. PR comments and review comments from other developers

## Instructions
1. Analyze the code review feedback and PR comments carefully
2. Identify the specific issues that need to be fixed
3. Implement the necessary changes to address all feedback
4. Ensure the fixes maintain code quality and follow project conventions
5. Test your changes if applicable

## Code Review Feedback
$review_result

## PR Comments and Review Comments
$comments_result

## Current Status
- Working Directory: $repo_root
- PR Number: #$pr_number
- Current Branch: $current_branch

Please implement the necessary fixes based on the feedback above.
EOF
}

# Run main function
main "$@"