#!/bin/bash

set -euo pipefail

# Global variables for command line options
WITHOUT_WORKTREE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Parse command line arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --without-worktree)
                WITHOUT_WORKTREE=true
                shift
                ;;
            -ww)
                WITHOUT_WORKTREE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Show help message
show_help() {
    cat << EOF
Usage: resolve-gh-issue [OPTIONS]

Interactive GitHub issue resolver with Claude Code integration.

OPTIONS:
    --without-worktree    Create branch only, skip worktree creation
    -ww                   Short form of --without-worktree
    -h, --help           Show this help message

DESCRIPTION:
    This tool helps you resolve GitHub issues by:
    1. Selecting an issue interactively
    2. Generating an appropriate branch name
    3. Creating a worktree (unless --without-worktree is used)
    4. Setting up the environment for Claude Code

    By default, a new worktree is created in .git/working-trees/
    Use --without-worktree to work in the current directory instead.
EOF
}

# Check if required commands are available
check_requirements() {
    local missing_commands=()
    
    for cmd in git gh claude; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_commands+=("$cmd")
        fi
    done
    
    if [ ${#missing_commands[@]} -ne 0 ]; then
        log_error "Missing required commands: ${missing_commands[*]}"
        exit 1
    fi
}

# Find git repository root
find_git_root() {
    local current_dir="$(pwd)"
    
    while [ "$current_dir" != "/" ]; do
        if [ -d "$current_dir/.git" ]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    log_error "Not in a git repository"
    exit 1
}

# Select issue using gh command
select_issue() {
    local repo_root="$1"
    
    log_info "Selecting issue..." >&2
    
    # Check if gh is authenticated
    if ! gh auth status &> /dev/null; then
        log_error "Please authenticate with GitHub CLI first: gh auth login" >&2
        exit 1
    fi
    
    # Get issues list formatted for peco
    local issues_list
    issues_list=$(gh issue list --state=open --json number,title --template '{{range .}}{{printf "#%v: %s\n" .number .title}}{{end}}')
    
    if [ -z "$issues_list" ]; then
        log_error "No open issues found" >&2
        exit 1
    fi
    
    # Use peco to select issue interactively
    local selected_issue
    selected_issue=$(echo "$issues_list" | peco --prompt="Select issue: ")
    
    if [ -z "$selected_issue" ]; then
        log_error "No issue selected" >&2
        exit 1
    fi
    
    # Extract issue number from selected line (format: #123: Title)
    local issue_number
    issue_number=$(echo "$selected_issue" | sed 's/^#\([0-9]*\):.*/\1/')
    
    if [ -z "$issue_number" ]; then
        log_error "Could not extract issue number" >&2
        exit 1
    fi
    
    echo "$issue_number"
}

# Get issue details
get_issue_details() {
    local issue_number="$1"
    
    log_info "Getting issue details for #$issue_number..." >&2
    
    local issue_data
    issue_data=$(gh issue view "$issue_number" --json title,body,labels,comments)
    
    # Filter comments to only include author and body fields, excluding minimized comments
    local filtered_data
    filtered_data=$(echo "$issue_data" | jq '{
        title: .title,
        body: .body,
        labels: .labels,
        comments: [.comments[] | select(.isMinimized == false) | {
            author: .author.login,
            body: .body
        }]
    }')
    
    echo "$filtered_data"
}

# Generate branch name using claude
generate_branch_name() {
    local issue_data="$1"
    
    log_info "Generating branch name with Claude..." >&2
    
    local prompt="Based on this GitHub issue, suggest a branch name with appropriate prefix (feature/, fix/, chore/, docs/). 
    The branch name should be descriptive but concise, using kebab-case.
    Only return the branch name, nothing else.
    
    Issue data:
    $issue_data"
    
    local branch_name
    branch_name=$(echo "$prompt" | claude -p)
    
    # Clean up the response (remove any extra whitespace or quotes)
    branch_name=$(echo "$branch_name" | tr -d '"' | xargs)
    
    echo "$branch_name"
}

# Create branch only (without worktree)
create_branch_only() {
    local branch_name="$1"
    
    log_info "Creating branch: $branch_name (without worktree)" >&2
    
    # Check if branch already exists
    if git show-ref --verify --quiet refs/heads/$branch_name; then
        log_warning "Branch '$branch_name' already exists" >&2
        log_error "Please delete the existing branch first or choose a different issue" >&2
        exit 1
    fi
    
    # Create and checkout the new branch
    git checkout -b "$branch_name" main >&2
    
    # Return current directory since we're not using worktree
    pwd
}

# Create worktree
create_worktree() {
    local repo_root="$1"
    local branch_name="$2"
    
    log_info "Creating worktree for branch: $branch_name" >&2
    
    local worktree_dir="$repo_root/.git/working-trees/$branch_name"
    
    # Create the working-trees directory if it doesn't exist
    mkdir -p "$repo_root/.git/working-trees"
    
    # Check if worktree already exists
    if [ -d "$worktree_dir" ] || git worktree list | grep -q "$worktree_dir"; then
        log_warning "Worktree for branch '$branch_name' already exists at: $worktree_dir" >&2
        log_error "Please remove the existing worktree first or choose a different issue" >&2
        exit 1
    fi
    
    # Check if branch already exists
    if git show-ref --verify --quiet refs/heads/$branch_name; then
        log_warning "Branch '$branch_name' already exists" >&2
        log_error "Please delete the existing branch first or choose a different issue" >&2
        exit 1
    fi
    
    # Create worktree
    git worktree add "$worktree_dir" -b "$branch_name" main >&2
    
    echo "$worktree_dir"
}

# Copy .env files
copy_env_files() {
    local repo_root="$1"
    local worktree_dir="$2"
    
    log_info "Copying .env files..." >&2
    
    # Copy .env from root if exists
    if [ -f "$repo_root/.env" ]; then
        cp "$repo_root/.env" "$worktree_dir/.env"
        log_success "Copied .env from root" >&2
    fi
    
    # Handle monorepo structure - copy .env files from packages
    if [ -d "$repo_root/packages" ]; then
        for package_dir in "$repo_root/packages"/*; do
            if [ -d "$package_dir" ] && [ -f "$package_dir/.env" ]; then
                local package_name=$(basename "$package_dir")
                local target_dir="$worktree_dir/packages/$package_name"
                
                if [ -d "$target_dir" ]; then
                    cp "$package_dir/.env" "$target_dir/.env"
                    log_success "Copied .env for package: $package_name" >&2
                fi
            fi
        done
    fi
    
    # Handle apps directory (common in monorepos)
    if [ -d "$repo_root/apps" ]; then
        for app_dir in "$repo_root/apps"/*; do
            if [ -d "$app_dir" ] && [ -f "$app_dir/.env" ]; then
                local app_name=$(basename "$app_dir")
                local target_dir="$worktree_dir/apps/$app_name"
                
                if [ -d "$target_dir" ]; then
                    cp "$app_dir/.env" "$target_dir/.env"
                    log_success "Copied .env for app: $app_name" >&2
                fi
            fi
        done
    fi
}

# Detect package manager and install dependencies
install_dependencies() {
    local worktree_dir="$1"
    
    log_info "Installing dependencies..." >&2
    
    cd "$worktree_dir"
    
    if [ -f "bun.lockb" ]; then
        log_info "Detected Bun, running bun install..." >&2
        bun install >&2
    elif [ -f "pnpm-lock.yaml" ]; then
        log_info "Detected pnpm, running pnpm install..." >&2
        pnpm install >&2
    elif [ -f "package-lock.json" ]; then
        log_info "Detected npm, running npm install..." >&2
        npm install >&2
    elif [ -f "deno.json" ] || [ -f "deno.jsonc" ]; then
        log_info "Detected Deno, skipping install (Deno handles dependencies automatically)" >&2
    elif [ -f "package.json" ]; then
        log_info "Found package.json, using npm as fallback..." >&2
        npm install >&2
    else
        log_warning "No package manager configuration found, skipping dependency installation" >&2
    fi
}


# Main function  
main() {
    # Parse command line arguments
    parse_arguments "$@"
    
    log_info "Starting GitHub Issue Solver with Claude..." >&2
    
    # Check requirements
    check_requirements
    
    # Find git repository root
    local repo_root
    repo_root=$(find_git_root)
    log_success "Found git repository at: $repo_root" >&2
    
    # Change to repo root
    cd "$repo_root"
    
    # Select issue
    local issue_number
    issue_number=$(select_issue "$repo_root")
    log_success "Selected issue #$issue_number" >&2
    
    # Get issue details
    local issue_data
    issue_data=$(get_issue_details "$issue_number")
    
    # Generate branch name
    local branch_name
    branch_name=$(generate_branch_name "$issue_data")
    log_success "Generated branch name: $branch_name" >&2
    
    # Create worktree or branch only based on option
    local working_dir
    if [ "$WITHOUT_WORKTREE" = true ]; then
        working_dir=$(create_branch_only "$branch_name")
        log_success "Created branch: $branch_name (working in current directory)" >&2
        
        # Skip .env copying and dependency installation for without-worktree mode
        # as we're working in the current directory
    else
        working_dir=$(create_worktree "$repo_root" "$branch_name")
        log_success "Created worktree at: $working_dir" >&2
        
        # Copy .env files
        copy_env_files "$repo_root" "$working_dir"
        
        # Install dependencies
        install_dependencies "$working_dir"
        log_success "Dependencies installed" >&2
    fi
    
    log_success "Setup completed!" >&2
    log_info "Working directory: $working_dir" >&2
    log_info "Branch: $branch_name" >&2
    echo "" >&2
    log_info "Outputting working directory and issue prompt..." >&2
    echo "" >&2
    
    # Output working directory first, then the prompt (separated by newline)
    echo "$working_dir"
    cat << EOF
Please solve this GitHub issue. Analyze the codebase and implement the necessary changes.

Issue details:
$issue_data

Please:
1. Analyze the existing codebase structure
2. Implement the necessary changes to solve the issue
3. Ensure code quality and follow existing patterns
4. Add tests if applicable
5. Update documentation if needed

Current working directory: $working_dir
Branch: $branch_name
EOF
}

# Run main function
main "$@"