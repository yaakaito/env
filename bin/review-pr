#!/bin/bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show help message
show_help() {
    cat << EOF
Usage: review-pr [PR_NUMBER]

PR review tool with Claude Code integration.

OPTIONS:
    PR_NUMBER            Optional PR number to review (if not provided, will show list)
    -h, --help          Show this help message

DESCRIPTION:
    This tool helps you review GitHub PRs by:
    1. Selecting a PR (or using provided number)
    2. Fetching PR details and diff
    3. Generating a comprehensive review prompt for Claude Code

EOF
}

# Check if required commands are available
check_requirements() {
    local missing_commands=()
    
    for cmd in git gh; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_commands+=("$cmd")
        fi
    done
    
    if [ ${#missing_commands[@]} -ne 0 ]; then
        log_error "Missing required commands: ${missing_commands[*]}"
        exit 1
    fi
}

# Find git repository root
find_git_root() {
    local current_dir="$(pwd)"
    
    while [ "$current_dir" != "/" ]; do
        if [ -d "$current_dir/.git" ]; then
            echo "$current_dir"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done
    
    log_error "Not in a git repository"
    exit 1
}

# Select PR using gh command
select_pr() {
    log_info "Selecting PR..." >&2
    
    # Check if gh is authenticated
    if ! gh auth status &> /dev/null; then
        log_error "Please authenticate with GitHub CLI first: gh auth login" >&2
        exit 1
    fi
    
    # Get PRs list formatted for peco
    local prs_list
    prs_list=$(gh pr list --state=open --json number,title,author --template '{{range .}}{{printf "#%v: %s (by %s)\n" .number .title .author.login}}{{end}}')
    
    if [ -z "$prs_list" ]; then
        log_error "No open PRs found" >&2
        exit 1
    fi
    
    # Use peco to select PR interactively
    local selected_pr
    selected_pr=$(echo "$prs_list" | peco --prompt="Select PR to review: ")
    
    if [ -z "$selected_pr" ]; then
        log_error "No PR selected" >&2
        exit 1
    fi
    
    # Extract PR number from selected line (format: #123: Title)
    local pr_number
    pr_number=$(echo "$selected_pr" | sed 's/^#\([0-9]*\):.*/\1/')
    
    if [ -z "$pr_number" ]; then
        log_error "Could not extract PR number" >&2
        exit 1
    fi
    
    echo "$pr_number"
}

# Get PR details and diff
get_pr_details() {
    local pr_number="$1"
    
    log_info "Getting PR details for #$pr_number..." >&2
    
    # Get PR details
    local pr_details
    pr_details=$(gh pr view "$pr_number" --json title,body,author,headRepository,baseRepository,headRefName,baseRefName,url)
    
    # Get PR diff
    local pr_diff
    pr_diff=$(gh pr diff "$pr_number")
    
    # Combine the information
    local combined_info
    combined_info=$(jq -n \
        --argjson pr "$pr_details" \
        --arg diff "$pr_diff" \
        '{
            title: $pr.title,
            body: $pr.body,
            author: $pr.author.login,
            url: $pr.url,
            headRepository: $pr.headRepository.name,
            baseRepository: $pr.baseRepository.name,
            headRefName: $pr.headRefName,
            baseRefName: $pr.baseRefName,
            diff: $diff
        }')
    
    echo "$combined_info"
}

# Main function
main() {
    local pr_number=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                pr_number="$1"
                shift
                ;;
        esac
    done
    
    log_info "Starting PR review tool with Claude..." >&2
    
    # Check requirements
    check_requirements
    
    # Find git repository root
    local repo_root
    repo_root=$(find_git_root)
    log_success "Found git repository at: $repo_root" >&2
    
    # Change to repo root
    cd "$repo_root"
    
    # Select PR if not provided
    if [ -z "$pr_number" ]; then
        pr_number=$(select_pr)
        log_success "Selected PR #$pr_number" >&2
    else
        log_info "Using provided PR #$pr_number" >&2
    fi
    
    # Get PR details and diff
    local pr_data
    pr_data=$(get_pr_details "$pr_number")
    
    log_success "PR review setup completed!" >&2
    log_info "Working directory: $repo_root" >&2
    log_info "PR: #$pr_number" >&2
    echo "" >&2
    log_info "Outputting working directory and review prompt..." >&2
    echo "" >&2
    
    # Output working directory first, then the prompt
    echo "$repo_root"
    
    # Generate review prompt using the provided template
    cat << EOF
You are an expert code reviewer. Follow these steps:

1. If no PR number is provided in the args, use Bash("gh pr list") to show open PRs
2. If a PR number is provided, use Bash("gh pr view <number>") to get PR details
3. Use Bash("gh pr diff <number>") to get the diff
4. Analyze the changes and provide a thorough code review that includes:
   - Overview of what the PR does
   - Analysis of code quality and style
   - Specific suggestions for improvements
   - Any potential issues or risks

Keep your review concise but thorough. Focus on:
- Code correctness
- Following project conventions
- Performance implications
- Test coverage
- Security considerations

Format your review with clear sections and bullet points.

PR number: $pr_number

PR Details:
$pr_data
EOF
}

# Run main function
main "$@"